#!/usr/bin/env bash

## ---------------------------------------
##  _   _ _     _        ______
## | | | | |   (_)      |___  /
## | | | | |__  _  ___     / / _   _ _ __
## | | | | '_ \| |/ _ \   / / | | | | '__|
## | |_| | |_) | | (_) |./ /__| |_| | |
##  \___/|_.__/|_|\___/ \_____/\__,_|_|
## 
##   UbioZur / ubiozur.tk
##        https://git.ubiozur.tk
##
## ---------------------------------------

## ----- VAULT CRYPT -----
##
## Compress and encrypt files to put as a secrured vault
##

# Fail Fast and cleanup
set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

# Get the script Directory
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# Get the Program Name
PROG=$( basename $0 )

# No Colors or style by default (in case the script die before the setup_colors function)
NOFORMAT=''
BOLD=''
RED=''              BOLDRED=''              BGRED=''
GREEN=''            BOLDGREEN='' 
YELLOW=''           BOLDYELLOW='' 
BLUE=''             BOLDBLUE=''
PURPLE=''           BOLDPURPLE=''

# Get the SSH directory.
SSH_DIR="${SSHHOME-"${XDG_DATA_HOME-"$HOME/.local/share"}/ssh"}"

# Get the GPG directory
GPG_DIR="${GNUPGHOME-"${XDG_DATA_HOME-"$HOME/.local/share"}/gnupg"}"

## ---------------------------------------
##  Common function to modify
## ---------------------------------------

## Usage / Help display for the script
####
function usage {
    # TODO create your help here
    cat << EOF # remove the space between << and EOF, this is due to web plugin issue
Usage Encrypt: $PROG [-h] [-v] [--no-color] [-s] [-g]
Usage Decrypt: $PROG [-h] [-v] [--no-color] -d [-s | -g] VAULT_FILE.tar.gz

Encrypt or Decrypt/install some settings files. usefull for quick backup, restore and deploying in new install.

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info
--no-color      Don't use color on output
-d, --decrypt   Decrypt the given tar file and install it depending on -s or -g
-s, --ssh       Process SSH Files
-g, --gpg       Process GNUPG Files
EOF
    exit
}

## Parse the script parameters
####
function parse_params {
    # default values of variables set from params
    flag=0
    param=''

    # If no flags, then show usage
    args=("$@")
    [[ ${#args[@]} -eq 0 ]] && usage

    # Set default
    decrypt=0
    dossh=0
    dogpg=0

    while :; do
        case "${1-}" in
            -h | --help) usage ;;
            -v | --verbose) set -x ;;
            --no-color) NO_COLOR=1 ;;
            -d | --decrypt) decrypt=1 ;;
            -s | --ssh) dossh=1 ;;
            -g | --gpg) dogpg=1 ;;
            -?*) die "Unknown option: $1" ;;
            *) break ;;
        esac
        shift
    done

    args=("$@")

    # if not decrypting, then keep going
    [[ $decrypt -eq 0 ]] && return 0

    # Cannot decrypt ssh and gpg at the same time
    [[ $dossh -eq 1 ]] && [[ $dogpg -eq 1 ]] && die "Cannot decrypt SSH and GPG at the same time!"

    # if decrypting, then check we have argument
    [[ ${#args[@]} -eq 0 ]] && die "Missing file to decrypt!"
    VAULTFILE="$args"

    return 0
}

## Cleanup to run after script finish
####
function cleanup {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here (clean temp file etc)
}

## Main loop of the script
####
function main {
    # Initialization
    parse_params "$@"
    setup_colors

    # Do Encryptions
    if [ $decrypt -eq 0 ]; then
        [[ $dossh -eq 1 ]] && encrypt_ssh
        [[ $dogpg -eq 1 ]] && encrypt_gpg
        return 0
    fi

    # Do Decryptions
    [[ $dossh -eq 1 ]] && decrypt_ssh "$VAULTFILE"
    [[ $dogpg -eq 1 ]] && decrypt_gpg "$VAULTFILE"
}


## ---------------------------------------
##  Code your scripts functions here
## ---------------------------------------

## Encrypt and conpress the current SSH folder
####
function encrypt_ssh {
    [[ ! -d "$SSH_DIR" ]] && die "\"$SSH_DIR\" is not a directory. Operation aborted!"

    __log "Compressing and Encrypting \"$SSH_DIR\""
    local vaultname="$(hostname)-ssh.tar.gz"
    /usr/bin/tar -czf - -C "$SSH_DIR/" . | /usr/bin/openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -e -salt -out "$vaultname"

    __success "Vault Created: $(/usr/bin/pwd)/$vaultname"
}

## Decrypt and install to the SSH folder
####
function decrypt_ssh {
    # usage: decrypt_ssh FILE.TAR.GZ
    [[ ! -d "$SSH_DIR" ]] && die "\"$SSH_DIR\" is not a directory. Operation aborted!"
    local inputfile="$1"

    __log "Decrypting and installing SSH \"$SSH_DIR\""
    /usr/bin/mkdir -p "$SSH_DIR"
    /usr/bin/openssl enc -d -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -in "$inputfile" | /usr/bin/tar -xz -C "$SSH_DIR/"
    /usr/bin/chmod -R 700 "$SSH_DIR"

    __success "SSH config Installed: $SSH_DIR/"
}


## Encrypt and conpress the current GPG folder
####
function encrypt_gpg {
    [[ ! -d "$GPG_DIR" ]] && die "\"$GPG_DIR\" is not a directory. Operation aborted!"

    __log "Compressing and Encrypting \"$GPG_DIR\""
    local vaultname="$(hostname)-gpg.tar.gz"
    /usr/bin/tar -czf - -C "$GPG_DIR/" . | /usr/bin/openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -e -salt -out "$vaultname"

    __success "Vault Created: $(/usr/bin/pwd)/$vaultname"
}

## Decrypt and install to the GPG folder
####
function decrypt_gpg {
    # usage: decrypt_gpg FILE.TAR.GZ
    [[ ! -d "$GPG_DIR" ]] && die "\"$GPG_DIR\" is not a directory. Operation aborted!"
    local inputfile="$1"

    __log "Decrypting and installing GPG \"$GPG_DIR\""
    /usr/bin/mkdir -p "$GPG_DIR"
    /usr/bin/openssl enc -d -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -in "$inputfile" | /usr/bin/tar -xz -C "$GPG_DIR/"
    /usr/bin/chmod -R 700 "$GPG_DIR"

    __success "GPG config Installed: $GPG_DIR/"
}


## ---------------------------------------
##  Common scripts functions
## ---------------------------------------

## Setup the colors for nicer output If on tty and terminal allow it
####
function setup_colors {
    # https://www.shellhacks.com/bash-colors/
    if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
        NOFORMAT='\033[0;0m'
        BOLD='\033[1m'
        RED='\033[0;31m'    BOLDRED='\033[1;31m'    BGRED='\033[1;41m'
        GREEN='\033[0;32m'  BOLDGREEN='\033[1;32m' 
        YELLOW='\033[0;33m' BOLDYELLOW='\033[1;33m' 
        BLUE='\033[0;34m'   BOLDBLUE='\033[1;34m'
        PURPLE='\033[0;35m' BOLDPURPLE='\033[1;35m'
    fi
}

## Exit the script after an error!
####
die() {
    local msg=$1
    local code=${2-1} # default exit status 1
    __error "$msg"
    exit "$code"
}

## Error message printing
####
function __error {
    echo >&2 -e "${BGRED}[ERROR]    ${1-}${NOFORMAT}"
}

## Warning message printing
####
function __warning {
    echo >&2 -e "${BOLD}[${BOLDYELLOW}WARNING${NOFORMAT}${BOLD}]${YELLOW}  ${1-}${NOFORMAT}"
}

## Fail message printing
####
function __fail {
    echo >&2 -e "${BOLD}[${BOLDRED}FAIL${NOFORMAT}${BOLD}]${RED}     ${1-}${NOFORMAT}"
}

## Success message printing
####
function __success {
    echo >&2 -e "${BOLD}[${BOLDGREEN}SUCCESS${NOFORMAT}${BOLD}]${GREEN}  ${1-}${NOFORMAT}"
}

## Log for sudo message printing
####
function __sudolog {
    echo >&2 -e "${BOLD}[${BOLDPURPLE}SUDO${NOFORMAT}${BOLD}]${NOFORMAT}     ${1-}"
}

## Log message printing
####
function __log {
    echo >&2 -e "${BOLD}[LOG]${NOFORMAT}      ${1-}"
}

## Section message printing
####
function __section {
    echo >&2 -e "${BOLD}[${BOLDBLUE}SECTION${NOFORMAT}${BOLD}]${BOLDBLUE}  ####  ${1-}  ####${NOFORMAT}"
}

## Prompt message printing
####
function __prompt {
    echo >&2 -en "${BOLD}[PROMPT]${NOFORMAT}   ${1-} "
    read
}


## ---------------------------------------
##  Call the main function
## ---------------------------------------

main "$@"; exit